<?php

use \owzim\FieldtypeYaml\FTY;

/**
 * Class definition of FieldtypeYaml
 *
 * A Fieldtype module for ProcessWire CMS/CMF
 *
 * See README.md for usage instructions.
 *
 * @author Christian (owzim) Raunitschka <git@raunitschka.de>
 * @copyright Copyright (c) 2015-2017, Christian Raunitschka
 *
 * @version 0.5.0
 *
 * @filesource
 *
 * @see https://github.com/owzim/pw-fieldtype-yaml
 * @see http://raunitschka.de
 * @see http://www.processwire.com
 */

class FieldtypeYaml extends FieldtypeTextarea
{

    public static function getModuleInfo()
    {
        return array(
            'title'    => 'Fieldtype YAML',
            'summary'  => 'Field that stores YAML data and formats it as an object, when requested.',
            'version'  => '0.5.0',
            'author'   => 'owzim',
            'icon'     => 'code',
            'requires' => array('PHP>=5.4','ProcessWire>=2.5.5'),
        );
    }

    /**
     * init
     *
     */
    public function init()
    {
        parent::init();
        require_once(__DIR__ . '/owzim/FieldtypeYaml/Autoloader.php');
        spl_autoload_register('owzim\FieldtypeYaml\Autoloader::autoload');
    }

    /**
     * formatValue
     *
     * @param  Page   $page
     * @param  Field  $field
     * @param  string $value
     * @return object
     */
    public function ___formatValue(Page $page, Field $field, $value)
    {
        return $this->getCachedValue($page, $field, $value);
    }

    /**
     * getCachedValue
     *
     * @param  Page   $page
     * @param  Field  $field
     * @param  string $value
     * @return object
     */
    public function getCachedValue(Page $page, Field $field, $value)
    {
        static $cache = null;
        if (is_null($cache)) $cache = array();

        $cacheKey = "{$page->id}_{$field->id}";
        if (array_key_exists($cacheKey, $cache)) return $cache[$cacheKey];

        return $cache[$cacheKey] = $this->parseValue($page, $field, $value);
    }

    /**
     * parseValue
     *
     * @param  Page   $page
     * @param  Field  $field
     * @param  string $value
     * @return object
     */
    public function ___parseValue(Page $page, Field $field, $value)
    {
        return FTY::parseYAML($value, $field->yamlParseAs, $field->get('label|name'));
    }

    /**
     * getConfigInputfields
     *
     * @param  Field  $field
     * @return InputfieldWrapper
     */
    public function ___getConfigInputfields(Field $field)
    {
        $forbidden = array('contentType', 'textformatters');

        $parentInputfields = parent::___getConfigInputfields($field);
        $inputfields = new InputfieldWrapper();

        foreach ($parentInputfields as $inputfield) {
            // Don't add fields that are needed in this scope
            if (!in_array($inputfield->name, $forbidden)) {

                // Dont't add fields which visibilities react to 'contentType',
                // since this is not added anyway, and will throw a session warning
                if (strpos($inputfield->showIf, 'contentType') === false) {
                    $inputfields->append($inputfield);
                } else {
                    // https://regex101.com/r/G4Wo6l/1
                    // $inputfield->showIf = preg_replace('/(contentType=[0-9](,)?( )?)/', '', $inputfield->showIf);
                }
            }
        }

        $inputfields->add(array(
            array(
                'type'          => 'InputfieldRadios',
                'name'          => 'yamlParseAs',
                'label'         => $this->_('Parse as'),
                'options'       => array(
                    FTY::PARSE_AS_WIRE_DATA => $this->_('WireArray/WireData'),
                    FTY::PARSE_AS_WIRE_ARRAY => $this->_('WireArray'),
                    FTY::PARSE_AS_OBJECT => $this->_('Object'),
                    FTY::PARSE_AS_ASSOC => $this->_('Associative Array'),
                ),
                'value'         => !isset($field->yamlParseAs) ? FTY::DEFAULT_PARSE_AS : (int) $field->yamlParseAs,
                'optionColumns' => 0,
                'columnWidth'   => 50,
                'description'   => $this->_(
                    "See `**README.md**` for usage details"
                ),
            )
        ));

        return $inputfields;
    }
}
